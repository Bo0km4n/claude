// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NoticeLRRequest struct {
	Port                 string   `protobuf:"bytes,1,opt,name=port" json:"port,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoticeLRRequest) Reset()         { *m = NoticeLRRequest{} }
func (m *NoticeLRRequest) String() string { return proto.CompactTextString(m) }
func (*NoticeLRRequest) ProtoMessage()    {}
func (*NoticeLRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_peer_77bc79d806131108, []int{0}
}
func (m *NoticeLRRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoticeLRRequest.Unmarshal(m, b)
}
func (m *NoticeLRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoticeLRRequest.Marshal(b, m, deterministic)
}
func (dst *NoticeLRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoticeLRRequest.Merge(dst, src)
}
func (m *NoticeLRRequest) XXX_Size() int {
	return xxx_messageInfo_NoticeLRRequest.Size(m)
}
func (m *NoticeLRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NoticeLRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NoticeLRRequest proto.InternalMessageInfo

func (m *NoticeLRRequest) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *NoticeLRRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*NoticeLRRequest)(nil), "proto.NoticeLRRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	NoticeFromLRRPC(ctx context.Context, in *NoticeLRRequest, opts ...grpc.CallOption) (*Empty, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) NoticeFromLRRPC(ctx context.Context, in *NoticeLRRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Peer/NoticeFromLRRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	NoticeFromLRRPC(context.Context, *NoticeLRRequest) (*Empty, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_NoticeFromLRRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeLRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).NoticeFromLRRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Peer/NoticeFromLRRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).NoticeFromLRRPC(ctx, req.(*NoticeLRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoticeFromLRRPC",
			Handler:    _Peer_NoticeFromLRRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer.proto",
}

func init() { proto.RegisterFile("peer.proto", fileDescriptor_peer_77bc79d806131108) }

var fileDescriptor_peer_77bc79d806131108 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x48, 0x4d, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xdc, 0xa9, 0xb9, 0x05, 0x25,
	0x95, 0x10, 0x31, 0x25, 0x4b, 0x2e, 0x7e, 0xbf, 0xfc, 0x92, 0xcc, 0xe4, 0x54, 0x9f, 0xa0, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0x82, 0xfc, 0xa2, 0x12, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x1b, 0x24, 0x96, 0x98, 0x92, 0x52, 0x24, 0xc1, 0x04, 0x11,
	0x03, 0xb1, 0x8d, 0xec, 0xb9, 0x58, 0x02, 0x52, 0x53, 0x8b, 0x84, 0xcc, 0x61, 0x46, 0xb8, 0x15,
	0xe5, 0xe7, 0xfa, 0x04, 0x05, 0x05, 0x38, 0x0b, 0x89, 0x41, 0x4c, 0xd7, 0x43, 0x33, 0x5a, 0x8a,
	0x07, 0x2a, 0xee, 0x0a, 0x72, 0x41, 0x12, 0x1b, 0x98, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xcb, 0x33, 0xfa, 0x5d, 0xa4, 0x00, 0x00, 0x00,
}
