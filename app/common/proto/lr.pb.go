// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lr.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PeerJoinRequest struct {
	PeerId               []byte   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	LocalIp              string   `protobuf:"bytes,2,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	LocalPort            string   `protobuf:"bytes,3,opt,name=local_port,json=localPort" json:"local_port,omitempty"`
	Latitude             float32  `protobuf:"fixed32,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,5,opt,name=longitude" json:"longitude,omitempty"`
	Protocol             string   `protobuf:"bytes,6,opt,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerJoinRequest) Reset()         { *m = PeerJoinRequest{} }
func (m *PeerJoinRequest) String() string { return proto.CompactTextString(m) }
func (*PeerJoinRequest) ProtoMessage()    {}
func (*PeerJoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{0}
}
func (m *PeerJoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerJoinRequest.Unmarshal(m, b)
}
func (m *PeerJoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerJoinRequest.Marshal(b, m, deterministic)
}
func (dst *PeerJoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerJoinRequest.Merge(dst, src)
}
func (m *PeerJoinRequest) XXX_Size() int {
	return xxx_messageInfo_PeerJoinRequest.Size(m)
}
func (m *PeerJoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerJoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerJoinRequest proto.InternalMessageInfo

func (m *PeerJoinRequest) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PeerJoinRequest) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

func (m *PeerJoinRequest) GetLocalPort() string {
	if m != nil {
		return m.LocalPort
	}
	return ""
}

func (m *PeerJoinRequest) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *PeerJoinRequest) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *PeerJoinRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type PeerJoinResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerJoinResponse) Reset()         { *m = PeerJoinResponse{} }
func (m *PeerJoinResponse) String() string { return proto.CompactTextString(m) }
func (*PeerJoinResponse) ProtoMessage()    {}
func (*PeerJoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{1}
}
func (m *PeerJoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerJoinResponse.Unmarshal(m, b)
}
func (m *PeerJoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerJoinResponse.Marshal(b, m, deterministic)
}
func (dst *PeerJoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerJoinResponse.Merge(dst, src)
}
func (m *PeerJoinResponse) XXX_Size() int {
	return xxx_messageInfo_PeerJoinResponse.Size(m)
}
func (m *PeerJoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerJoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeerJoinResponse proto.InternalMessageInfo

func (m *PeerJoinResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PeerEntry struct {
	PeerId               []byte   `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	LocalIp              string   `protobuf:"bytes,2,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	LocalPort            string   `protobuf:"bytes,3,opt,name=local_port,json=localPort" json:"local_port,omitempty"`
	Latitude             float32  `protobuf:"fixed32,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,5,opt,name=longitude" json:"longitude,omitempty"`
	IsRemote             bool     `protobuf:"varint,6,opt,name=is_remote,json=isRemote" json:"is_remote,omitempty"`
	Protocol             string   `protobuf:"bytes,7,opt,name=protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerEntry) Reset()         { *m = PeerEntry{} }
func (m *PeerEntry) String() string { return proto.CompactTextString(m) }
func (*PeerEntry) ProtoMessage()    {}
func (*PeerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{2}
}
func (m *PeerEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerEntry.Unmarshal(m, b)
}
func (m *PeerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerEntry.Marshal(b, m, deterministic)
}
func (dst *PeerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerEntry.Merge(dst, src)
}
func (m *PeerEntry) XXX_Size() int {
	return xxx_messageInfo_PeerEntry.Size(m)
}
func (m *PeerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PeerEntry proto.InternalMessageInfo

func (m *PeerEntry) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PeerEntry) GetLocalIp() string {
	if m != nil {
		return m.LocalIp
	}
	return ""
}

func (m *PeerEntry) GetLocalPort() string {
	if m != nil {
		return m.LocalPort
	}
	return ""
}

func (m *PeerEntry) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *PeerEntry) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *PeerEntry) GetIsRemote() bool {
	if m != nil {
		return m.IsRemote
	}
	return false
}

func (m *PeerEntry) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type ExchangeEntriesNotification struct {
	Destinations         []*LREntry `protobuf:"bytes,1,rep,name=destinations" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExchangeEntriesNotification) Reset()         { *m = ExchangeEntriesNotification{} }
func (m *ExchangeEntriesNotification) String() string { return proto.CompactTextString(m) }
func (*ExchangeEntriesNotification) ProtoMessage()    {}
func (*ExchangeEntriesNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{3}
}
func (m *ExchangeEntriesNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeEntriesNotification.Unmarshal(m, b)
}
func (m *ExchangeEntriesNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeEntriesNotification.Marshal(b, m, deterministic)
}
func (dst *ExchangeEntriesNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeEntriesNotification.Merge(dst, src)
}
func (m *ExchangeEntriesNotification) XXX_Size() int {
	return xxx_messageInfo_ExchangeEntriesNotification.Size(m)
}
func (m *ExchangeEntriesNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeEntriesNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeEntriesNotification proto.InternalMessageInfo

func (m *ExchangeEntriesNotification) GetDestinations() []*LREntry {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type ExchangeEntriesRequest struct {
	Entries              []*PeerEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExchangeEntriesRequest) Reset()         { *m = ExchangeEntriesRequest{} }
func (m *ExchangeEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ExchangeEntriesRequest) ProtoMessage()    {}
func (*ExchangeEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{4}
}
func (m *ExchangeEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeEntriesRequest.Unmarshal(m, b)
}
func (m *ExchangeEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeEntriesRequest.Marshal(b, m, deterministic)
}
func (dst *ExchangeEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeEntriesRequest.Merge(dst, src)
}
func (m *ExchangeEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ExchangeEntriesRequest.Size(m)
}
func (m *ExchangeEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeEntriesRequest proto.InternalMessageInfo

func (m *ExchangeEntriesRequest) GetEntries() []*PeerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ExchangeEntriesResponse struct {
	Entries              []*PeerEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExchangeEntriesResponse) Reset()         { *m = ExchangeEntriesResponse{} }
func (m *ExchangeEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ExchangeEntriesResponse) ProtoMessage()    {}
func (*ExchangeEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_lr_c56f55a0e1d3965c, []int{5}
}
func (m *ExchangeEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExchangeEntriesResponse.Unmarshal(m, b)
}
func (m *ExchangeEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExchangeEntriesResponse.Marshal(b, m, deterministic)
}
func (dst *ExchangeEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeEntriesResponse.Merge(dst, src)
}
func (m *ExchangeEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_ExchangeEntriesResponse.Size(m)
}
func (m *ExchangeEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeEntriesResponse proto.InternalMessageInfo

func (m *ExchangeEntriesResponse) GetEntries() []*PeerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*PeerJoinRequest)(nil), "proto.PeerJoinRequest")
	proto.RegisterType((*PeerJoinResponse)(nil), "proto.PeerJoinResponse")
	proto.RegisterType((*PeerEntry)(nil), "proto.PeerEntry")
	proto.RegisterType((*ExchangeEntriesNotification)(nil), "proto.ExchangeEntriesNotification")
	proto.RegisterType((*ExchangeEntriesRequest)(nil), "proto.ExchangeEntriesRequest")
	proto.RegisterType((*ExchangeEntriesResponse)(nil), "proto.ExchangeEntriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LRClient is the client API for LR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LRClient interface {
	Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	PeerJoinRPC(ctx context.Context, in *PeerJoinRequest, opts ...grpc.CallOption) (*PeerJoinResponse, error)
	ExchangeEntriesStubRPC(ctx context.Context, in *ExchangeEntriesNotification, opts ...grpc.CallOption) (*Empty, error)
	ExchangeEntriesDriverRPC(ctx context.Context, in *ExchangeEntriesRequest, opts ...grpc.CallOption) (*ExchangeEntriesResponse, error)
}

type lRClient struct {
	cc *grpc.ClientConn
}

func NewLRClient(cc *grpc.ClientConn) LRClient {
	return &lRClient{cc}
}

func (c *lRClient) Heartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.LR/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lRClient) PeerJoinRPC(ctx context.Context, in *PeerJoinRequest, opts ...grpc.CallOption) (*PeerJoinResponse, error) {
	out := new(PeerJoinResponse)
	err := c.cc.Invoke(ctx, "/proto.LR/PeerJoinRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lRClient) ExchangeEntriesStubRPC(ctx context.Context, in *ExchangeEntriesNotification, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.LR/ExchangeEntriesStubRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lRClient) ExchangeEntriesDriverRPC(ctx context.Context, in *ExchangeEntriesRequest, opts ...grpc.CallOption) (*ExchangeEntriesResponse, error) {
	out := new(ExchangeEntriesResponse)
	err := c.cc.Invoke(ctx, "/proto.LR/ExchangeEntriesDriverRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LR service

type LRServer interface {
	Heartbeat(context.Context, *Empty) (*Empty, error)
	PeerJoinRPC(context.Context, *PeerJoinRequest) (*PeerJoinResponse, error)
	ExchangeEntriesStubRPC(context.Context, *ExchangeEntriesNotification) (*Empty, error)
	ExchangeEntriesDriverRPC(context.Context, *ExchangeEntriesRequest) (*ExchangeEntriesResponse, error)
}

func RegisterLRServer(s *grpc.Server, srv LRServer) {
	s.RegisterService(&_LR_serviceDesc, srv)
}

func _LR_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LRServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LR/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LRServer).Heartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LR_PeerJoinRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LRServer).PeerJoinRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LR/PeerJoinRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LRServer).PeerJoinRPC(ctx, req.(*PeerJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LR_ExchangeEntriesStubRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeEntriesNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LRServer).ExchangeEntriesStubRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LR/ExchangeEntriesStubRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LRServer).ExchangeEntriesStubRPC(ctx, req.(*ExchangeEntriesNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _LR_ExchangeEntriesDriverRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LRServer).ExchangeEntriesDriverRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LR/ExchangeEntriesDriverRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LRServer).ExchangeEntriesDriverRPC(ctx, req.(*ExchangeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LR",
	HandlerType: (*LRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _LR_Heartbeat_Handler,
		},
		{
			MethodName: "PeerJoinRPC",
			Handler:    _LR_PeerJoinRPC_Handler,
		},
		{
			MethodName: "ExchangeEntriesStubRPC",
			Handler:    _LR_ExchangeEntriesStubRPC_Handler,
		},
		{
			MethodName: "ExchangeEntriesDriverRPC",
			Handler:    _LR_ExchangeEntriesDriverRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lr.proto",
}

func init() { proto.RegisterFile("lr.proto", fileDescriptor_lr_c56f55a0e1d3965c) }

var fileDescriptor_lr_c56f55a0e1d3965c = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x53, 0x1a, 0xdb, 0x13, 0x0b, 0xaa, 0x3d, 0x34, 0xc6, 0xa5, 0x28, 0xf2, 0x05, 0x0b,
	0xa1, 0x1e, 0xc2, 0x9d, 0x0b, 0xb5, 0x44, 0xab, 0x0a, 0x85, 0xe5, 0xc4, 0x29, 0xf2, 0xc7, 0x50,
	0x56, 0x72, 0xbd, 0x66, 0x77, 0x8c, 0xe8, 0xff, 0xe0, 0xd7, 0xf0, 0x2f, 0xf8, 0x47, 0x68, 0xd7,
	0x1f, 0x6d, 0x1c, 0x7a, 0xe0, 0xd6, 0x53, 0xf4, 0xe6, 0xbd, 0x3c, 0xbf, 0x79, 0x3b, 0xe0, 0x55,
	0xea, 0xac, 0x51, 0x92, 0x24, 0x3b, 0xb4, 0x3f, 0xd1, 0x02, 0x6f, 0x1a, 0xba, 0xed, 0x66, 0x51,
	0x40, 0x59, 0x5e, 0x21, 0x75, 0x28, 0xfe, 0xed, 0xc0, 0xb3, 0x0d, 0xa2, 0xba, 0x94, 0xa2, 0xe6,
	0xf8, 0xbd, 0x45, 0x4d, 0x6c, 0x09, 0x6e, 0x83, 0xa8, 0xb6, 0xa2, 0x0c, 0x9d, 0x95, 0x93, 0x04,
	0x7c, 0x6e, 0xe0, 0x45, 0xc9, 0x9e, 0x83, 0x57, 0xc9, 0x22, 0xab, 0xb6, 0xa2, 0x09, 0x67, 0x2b,
	0x27, 0xf1, 0xb9, 0x6b, 0xf1, 0x45, 0xc3, 0x4e, 0x01, 0x3a, 0xaa, 0x91, 0x8a, 0xc2, 0x03, 0x4b,
	0xfa, 0x76, 0xb2, 0x91, 0x8a, 0x58, 0x04, 0x5e, 0x95, 0x91, 0xa0, 0xb6, 0xc4, 0xf0, 0xc9, 0xca,
	0x49, 0x66, 0x7c, 0xc4, 0xec, 0x05, 0xf8, 0x95, 0xac, 0xaf, 0x3b, 0xf2, 0xd0, 0x92, 0x77, 0x03,
	0xf3, 0x4f, 0x9b, 0xb4, 0x90, 0x55, 0x38, 0xb7, 0xb6, 0x23, 0x8e, 0xdf, 0xc0, 0xd1, 0x5d, 0x76,
	0xdd, 0xc8, 0x5a, 0x23, 0x0b, 0xc1, 0xd5, 0x6d, 0x51, 0xa0, 0xd6, 0x36, 0xbc, 0xc7, 0x07, 0x18,
	0xff, 0x71, 0xc0, 0x37, 0xf2, 0xb4, 0x26, 0x75, 0xfb, 0xb8, 0x96, 0x3c, 0x01, 0x5f, 0xe8, 0xad,
	0xc2, 0x1b, 0x49, 0x68, 0xb7, 0xf4, 0xb8, 0x27, 0x34, 0xb7, 0x78, 0xa7, 0x01, 0x77, 0xd2, 0xc0,
	0x27, 0x38, 0x49, 0x7f, 0x16, 0xdf, 0xb2, 0xfa, 0x1a, 0xcd, 0x5a, 0x02, 0xf5, 0x47, 0x49, 0xe2,
	0xab, 0x28, 0x32, 0x12, 0xb2, 0x66, 0x6b, 0x08, 0x4a, 0xd4, 0x24, 0x6a, 0x0b, 0x4d, 0x23, 0x07,
	0xc9, 0x62, 0xfd, 0xb4, 0x7b, 0xfb, 0xb3, 0x2b, 0x6e, 0xab, 0xe0, 0x3b, 0x9a, 0xf8, 0x1c, 0x8e,
	0x27, 0x96, 0xc3, 0x5d, 0xbc, 0x06, 0x17, 0xbb, 0x49, 0x6f, 0x74, 0xd4, 0x1b, 0x8d, 0xad, 0xf2,
	0x41, 0x10, 0xa7, 0xb0, 0xdc, 0x73, 0xe9, 0x5f, 0xe8, 0x3f, 0x6c, 0xd6, 0xbf, 0x66, 0x30, 0xbb,
	0xe2, 0xec, 0x15, 0xf8, 0x1f, 0x30, 0x53, 0x94, 0x63, 0x46, 0x2c, 0xe8, 0xe5, 0xa9, 0x39, 0xea,
	0x68, 0x07, 0xb1, 0x77, 0xb0, 0x18, 0x2f, 0x62, 0xf3, 0x9e, 0x1d, 0xdf, 0x73, 0xbe, 0x77, 0xe1,
	0xd1, 0x72, 0x6f, 0xde, 0x67, 0xbb, 0xdc, 0x5b, 0xfe, 0x33, 0xb5, 0xb9, 0xb1, 0x8a, 0x87, 0xef,
	0x3c, 0x5c, 0xf7, 0x24, 0xcb, 0x17, 0x08, 0x27, 0xe2, 0x73, 0x25, 0x7e, 0xa0, 0x32, 0x6e, 0xa7,
	0xff, 0x76, 0x1b, 0xf2, 0xbd, 0x7c, 0x88, 0xee, 0x62, 0xe6, 0x73, 0x4b, 0xbf, 0xfd, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xf8, 0xde, 0xcc, 0xc5, 0xea, 0x03, 0x00, 0x00,
}
